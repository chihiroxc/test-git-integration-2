{
	"name": "Long notebook test Long cell",
	"properties": {
		"nbformat": 0,
		"nbformat_minor": 0,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# In Synapse Studio, try clicking inside editor and see how long the delay is before the caret moves.\r\n",
					"# Compare the delay time in this cell and the next cell.\r\n",
					"test\r\n",
					"\r\n",
					"test\r\n",
					""
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"#!/usr/bin/env python3\r\n",
					"# -*- coding: utf-8 -*-\r\n",
					"\"\"\"Setup script for IPython.\r\n",
					"Under Posix environments it works like a typical setup.py script.\r\n",
					"Under Windows, the command sdist is not supported, since IPython\r\n",
					"requires utilities which are not available under Windows.\"\"\"\r\n",
					"\r\n",
					"#-----------------------------------------------------------------------------\r\n",
					"#  Copyright (c) 2008-2011, IPython Development Team.\r\n",
					"#  Copyright (c) 2001-2007, Fernando Perez <fernando.perez@colorado.edu>\r\n",
					"#  Copyright (c) 2001, Janko Hauser <jhauser@zscout.de>\r\n",
					"#  Copyright (c) 2001, Nathaniel Gray <n8gray@caltech.edu>\r\n",
					"#\r\n",
					"#  Distributed under the terms of the Modified BSD License.\r\n",
					"#\r\n",
					"#  The full license is in the file COPYING.rst, distributed with this software.\r\n",
					"#-----------------------------------------------------------------------------\r\n",
					"\r\n",
					"import os\r\n",
					"import sys\r\n",
					"from pathlib import Path\r\n",
					"\r\n",
					"# **Python version check**\r\n",
					"#\r\n",
					"# This check is also made in IPython/__init__, don't forget to update both when\r\n",
					"# changing Python version requirements.\r\n",
					"if sys.version_info < (3, 7):\r\n",
					"    pip_message = 'This may be due to an out of date pip. Make sure you have pip >= 9.0.1.'\r\n",
					"    try:\r\n",
					"        import pip\r\n",
					"        pip_version = tuple([int(x) for x in pip.__version__.split('.')[:3]])\r\n",
					"        if pip_version < (9, 0, 1) :\r\n",
					"            pip_message = 'Your pip version is out of date, please install pip >= 9.0.1. '\\\r\n",
					"            'pip {} detected.'.format(pip.__version__)\r\n",
					"        else:\r\n",
					"            # pip is new enough - it must be something else\r\n",
					"            pip_message = ''\r\n",
					"    except Exception:\r\n",
					"        pass\r\n",
					"\r\n",
					"\r\n",
					"    error = \"\"\"\r\n",
					"IPython 7.17+ supports Python 3.7 and above, following NEP 29.\r\n",
					"When using Python 2.7, please install IPython 5.x LTS Long Term Support version.\r\n",
					"Python 3.3 and 3.4 were supported up to IPython 6.x.\r\n",
					"Python 3.5 was supported with IPython 7.0 to 7.9.\r\n",
					"Python 3.6 was supported with IPython up to 7.16.\r\n",
					"See IPython `README.rst` file for more information:\r\n",
					"    https://github.com/ipython/ipython/blob/master/README.rst\r\n",
					"Python {py} detected.\r\n",
					"{pip}\r\n",
					"\"\"\".format(py=sys.version_info, pip=pip_message )\r\n",
					"\r\n",
					"    print(error, file=sys.stderr)\r\n",
					"    sys.exit(1)\r\n",
					"\r\n",
					"# At least we're on the python version we need, move on.\r\n",
					"\r\n",
					"# BEFORE importing distutils, remove MANIFEST. distutils doesn't properly\r\n",
					"# update it when the contents of directories change.\r\n",
					"if Path(\"MANIFEST\").exists():\r\n",
					"    Path(\"MANIFEST\").unlink()\r\n",
					"\r\n",
					"from distutils.core import setup\r\n",
					"\r\n",
					"# Our own imports\r\n",
					"from setupbase import target_update\r\n",
					"\r\n",
					"from setupbase import (\r\n",
					"    setup_args,\r\n",
					"    find_packages,\r\n",
					"    find_package_data,\r\n",
					"    check_package_data_first,\r\n",
					"    find_entry_points,\r\n",
					"    build_scripts_entrypt,\r\n",
					"    find_data_files,\r\n",
					"    git_prebuild,\r\n",
					"    install_symlinked,\r\n",
					"    install_lib_symlink,\r\n",
					"    install_scripts_for_symlink,\r\n",
					"    unsymlink,\r\n",
					")\r\n",
					"\r\n",
					"#-------------------------------------------------------------------------------\r\n",
					"# Handle OS specific things\r\n",
					"#-------------------------------------------------------------------------------\r\n",
					"\r\n",
					"if os.name in ('nt','dos'):\r\n",
					"    os_name = 'windows'\r\n",
					"else:\r\n",
					"    os_name = os.name\r\n",
					"\r\n",
					"# Under Windows, 'sdist' has not been supported.  Now that the docs build with\r\n",
					"# Sphinx it might work, but let's not turn it on until someone confirms that it\r\n",
					"# actually works.\r\n",
					"if os_name == 'windows' and 'sdist' in sys.argv:\r\n",
					"    print('The sdist command is not available under Windows.  Exiting.')\r\n",
					"    sys.exit(1)\r\n",
					"\r\n",
					"\r\n",
					"#-------------------------------------------------------------------------------\r\n",
					"# Things related to the IPython documentation\r\n",
					"#-------------------------------------------------------------------------------\r\n",
					"\r\n",
					"# update the manuals when building a source dist\r\n",
					"if len(sys.argv) >= 2 and sys.argv[1] in ('sdist','bdist_rpm'):\r\n",
					"\r\n",
					"    # List of things to be updated. Each entry is a triplet of args for\r\n",
					"    # target_update()\r\n",
					"    to_update = [\r\n",
					"                 ('docs/man/ipython.1.gz',\r\n",
					"                  ['docs/man/ipython.1'],\r\n",
					"                  'cd docs/man && gzip -9c ipython.1 > ipython.1.gz'),\r\n",
					"                 ]\r\n",
					"\r\n",
					"\r\n",
					"    [ target_update(*t) for t in to_update ]\r\n",
					"\r\n",
					"#---------------------------------------------------------------------------\r\n",
					"# Find all the packages, package data, and data_files\r\n",
					"#---------------------------------------------------------------------------\r\n",
					"\r\n",
					"packages = find_packages()\r\n",
					"package_data = find_package_data()\r\n",
					"\r\n",
					"data_files = find_data_files()\r\n",
					"\r\n",
					"setup_args['packages'] = packages\r\n",
					"setup_args['package_data'] = package_data\r\n",
					"setup_args['data_files'] = data_files\r\n",
					"\r\n",
					"#---------------------------------------------------------------------------\r\n",
					"# custom distutils commands\r\n",
					"#---------------------------------------------------------------------------\r\n",
					"# imports here, so they are after setuptools import if there was one\r\n",
					"from distutils.command.sdist import sdist\r\n",
					"\r\n",
					"setup_args['cmdclass'] = {\r\n",
					"    'build_py': \\\r\n",
					"            check_package_data_first(git_prebuild('IPython')),\r\n",
					"    'sdist' : git_prebuild('IPython', sdist),\r\n",
					"    'symlink': install_symlinked,\r\n",
					"    'install_lib_symlink': install_lib_symlink,\r\n",
					"    'install_scripts_sym': install_scripts_for_symlink,\r\n",
					"    'unsymlink': unsymlink,\r\n",
					"}\r\n",
					"\r\n",
					"\r\n",
					"#---------------------------------------------------------------------------\r\n",
					"# Handle scripts, dependencies, and setuptools specific things\r\n",
					"#---------------------------------------------------------------------------\r\n",
					"\r\n",
					"# For some commands, use setuptools.  Note that we do NOT list install here!\r\n",
					"# If you want a setuptools-enhanced install, just run 'setupegg.py install'\r\n",
					"needs_setuptools = {'develop', 'release', 'bdist_egg', 'bdist_rpm',\r\n",
					"           'bdist', 'bdist_dumb', 'bdist_wininst', 'bdist_wheel',\r\n",
					"           'egg_info', 'easy_install', 'upload', 'install_egg_info',\r\n",
					"          }\r\n",
					"\r\n",
					"if len(needs_setuptools.intersection(sys.argv)) > 0:\r\n",
					"    import setuptools\r\n",
					"\r\n",
					"# This dict is used for passing extra arguments that are setuptools\r\n",
					"# specific to setup\r\n",
					"setuptools_extra_args = {}\r\n",
					"\r\n",
					"# setuptools requirements\r\n",
					"\r\n",
					"extras_require = dict(\r\n",
					"    parallel=[\"ipyparallel\"],\r\n",
					"    qtconsole=[\"qtconsole\"],\r\n",
					"    doc=[\"Sphinx>=1.3\"],\r\n",
					"    test=[\r\n",
					"        \"nose>=0.10.1\",\r\n",
					"        \"requests\",\r\n",
					"        \"testpath\",\r\n",
					"        \"pygments\",\r\n",
					"        \"nbformat\",\r\n",
					"        \"ipykernel\",\r\n",
					"        \"numpy>=1.16\",\r\n",
					"    ],\r\n",
					"    terminal=[],\r\n",
					"    kernel=[\"ipykernel\"],\r\n",
					"    nbformat=[\"nbformat\"],\r\n",
					"    notebook=[\"notebook\", \"ipywidgets\"],\r\n",
					"    nbconvert=[\"nbconvert\"],\r\n",
					")\r\n",
					"\r\n",
					"install_requires = [\r\n",
					"    'setuptools>=18.5',\r\n",
					"    'jedi>=0.16',\r\n",
					"    'decorator',\r\n",
					"    'pickleshare',\r\n",
					"    'traitlets>=4.2',\r\n",
					"    'prompt_toolkit>=2.0.0,<3.1.0,!=3.0.0,!=3.0.1',\r\n",
					"    'pygments',\r\n",
					"    'backcall',\r\n",
					"    'stack_data',\r\n",
					"]\r\n",
					"\r\n",
					"# Platform-specific dependencies:\r\n",
					"# This is the correct way to specify these,\r\n",
					"# but requires pip >= 6. pip < 6 ignores these.\r\n",
					"\r\n",
					"extras_require.update(\r\n",
					"    {\r\n",
					"        ':sys_platform != \"win32\"': [\"pexpect>4.3\"],\r\n",
					"        ':sys_platform == \"darwin\"': [\"appnope\"],\r\n",
					"        ':sys_platform == \"win32\"': [\"colorama\"],\r\n",
					"    }\r\n",
					")\r\n",
					"# FIXME: re-specify above platform dependencies for pip < 6\r\n",
					"# These would result in non-portable bdists.\r\n",
					"if not any(arg.startswith('bdist') for arg in sys.argv):\r\n",
					"    if sys.platform == 'darwin':\r\n",
					"        install_requires.extend(['appnope'])\r\n",
					"\r\n",
					"    if not sys.platform.startswith(\"win\"):\r\n",
					"        install_requires.append(\"pexpect>4.3\")\r\n",
					"\r\n",
					"    # workaround pypa/setuptools#147, where setuptools misspells\r\n",
					"    # platform_python_implementation as python_implementation\r\n",
					"    if 'setuptools' in sys.modules:\r\n",
					"        for key in list(extras_require):\r\n",
					"            if 'platform_python_implementation' in key:\r\n",
					"                new_key = key.replace('platform_python_implementation', 'python_implementation')\r\n",
					"                extras_require[new_key] = extras_require.pop(key)\r\n",
					"\r\n",
					"everything = set()\r\n",
					"for key, deps in extras_require.items():\r\n",
					"    if ':' not in key:\r\n",
					"        everything.update(deps)\r\n",
					"extras_require['all'] = list(sorted(everything))\r\n",
					"\r\n",
					"if 'setuptools' in sys.modules:\r\n",
					"    setuptools_extra_args['python_requires'] = '>=3.7'\r\n",
					"    setuptools_extra_args['zip_safe'] = False\r\n",
					"    setuptools_extra_args['entry_points'] = {\r\n",
					"        'console_scripts': find_entry_points(),\r\n",
					"        'pygments.lexers': [\r\n",
					"            'ipythonconsole = IPython.lib.lexers:IPythonConsoleLexer',\r\n",
					"            'ipython = IPython.lib.lexers:IPythonLexer',\r\n",
					"            'ipython3 = IPython.lib.lexers:IPython3Lexer',\r\n",
					"        ],\r\n",
					"    }\r\n",
					"    setup_args['extras_require'] = extras_require\r\n",
					"    setup_args['install_requires'] = install_requires\r\n",
					"\r\n",
					"else:\r\n",
					"    # scripts has to be a non-empty list, or install_scripts isn't called\r\n",
					"    setup_args['scripts'] = [e.split('=')[0].strip() for e in find_entry_points()]\r\n",
					"\r\n",
					"    setup_args['cmdclass']['build_scripts'] = build_scripts_entrypt\r\n",
					"\r\n",
					"#---------------------------------------------------------------------------\r\n",
					"# Do the actual setup now\r\n",
					"#---------------------------------------------------------------------------\r\n",
					"\r\n",
					"setup_args.update(setuptools_extra_args)\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"def main():\r\n",
					"    setup(**setup_args)\r\n",
					"\r\n",
					"if __name__ == '__main__':\r\n",
					"    main()\r\n",
					"\r\n",
					"#!/usr/bin/env python3\r\n",
					"# -*- coding: utf-8 -*-\r\n",
					"\"\"\"Setup script for IPython.\r\n",
					"Under Posix environments it works like a typical setup.py script.\r\n",
					"Under Windows, the command sdist is not supported, since IPython\r\n",
					"requires utilities which are not available under Windows.\"\"\"\r\n",
					"\r\n",
					"#-----------------------------------------------------------------------------\r\n",
					"#  Copyright (c) 2008-2011, IPython Development Team.\r\n",
					"#  Copyright (c) 2001-2007, Fernando Perez <fernando.perez@colorado.edu>\r\n",
					"#  Copyright (c) 2001, Janko Hauser <jhauser@zscout.de>\r\n",
					"#  Copyright (c) 2001, Nathaniel Gray <n8gray@caltech.edu>\r\n",
					"#\r\n",
					"#  Distributed under the terms of the Modified BSD License.\r\n",
					"#\r\n",
					"#  The full license is in the file COPYING.rst, distributed with this software.\r\n",
					"#-----------------------------------------------------------------------------\r\n",
					"\r\n",
					"import os\r\n",
					"import sys\r\n",
					"from pathlib import Path\r\n",
					"\r\n",
					"# **Python version check**\r\n",
					"#\r\n",
					"# This check is also made in IPython/__init__, don't forget to update both when\r\n",
					"# changing Python version requirements.\r\n",
					"if sys.version_info < (3, 7):\r\n",
					"    pip_message = 'This may be due to an out of date pip. Make sure you have pip >= 9.0.1.'\r\n",
					"    try:\r\n",
					"        import pip\r\n",
					"        pip_version = tuple([int(x) for x in pip.__version__.split('.')[:3]])\r\n",
					"        if pip_version < (9, 0, 1) :\r\n",
					"            pip_message = 'Your pip version is out of date, please install pip >= 9.0.1. '\\\r\n",
					"            'pip {} detected.'.format(pip.__version__)\r\n",
					"        else:\r\n",
					"            # pip is new enough - it must be something else\r\n",
					"            pip_message = ''\r\n",
					"    except Exception:\r\n",
					"        pass\r\n",
					"\r\n",
					"\r\n",
					"    error = \"\"\"\r\n",
					"IPython 7.17+ supports Python 3.7 and above, following NEP 29.\r\n",
					"When using Python 2.7, please install IPython 5.x LTS Long Term Support version.\r\n",
					"Python 3.3 and 3.4 were supported up to IPython 6.x.\r\n",
					"Python 3.5 was supported with IPython 7.0 to 7.9.\r\n",
					"Python 3.6 was supported with IPython up to 7.16.\r\n",
					"See IPython `README.rst` file for more information:\r\n",
					"    https://github.com/ipython/ipython/blob/master/README.rst\r\n",
					"Python {py} detected.\r\n",
					"{pip}\r\n",
					"\"\"\".format(py=sys.version_info, pip=pip_message )\r\n",
					"\r\n",
					"    print(error, file=sys.stderr)\r\n",
					"    sys.exit(1)\r\n",
					"\r\n",
					"# At least we're on the python version we need, move on.\r\n",
					"\r\n",
					"# BEFORE importing distutils, remove MANIFEST. distutils doesn't properly\r\n",
					"# update it when the contents of directories change.\r\n",
					"if Path(\"MANIFEST\").exists():\r\n",
					"    Path(\"MANIFEST\").unlink()\r\n",
					"\r\n",
					"from distutils.core import setup\r\n",
					"\r\n",
					"# Our own imports\r\n",
					"from setupbase import target_update\r\n",
					"\r\n",
					"from setupbase import (\r\n",
					"    setup_args,\r\n",
					"    find_packages,\r\n",
					"    find_package_data,\r\n",
					"    check_package_data_first,\r\n",
					"    find_entry_points,\r\n",
					"    build_scripts_entrypt,\r\n",
					"    find_data_files,\r\n",
					"    git_prebuild,\r\n",
					"    install_symlinked,\r\n",
					"    install_lib_symlink,\r\n",
					"    install_scripts_for_symlink,\r\n",
					"    unsymlink,\r\n",
					")\r\n",
					"\r\n",
					"#-------------------------------------------------------------------------------\r\n",
					"# Handle OS specific things\r\n",
					"#-------------------------------------------------------------------------------\r\n",
					"\r\n",
					"if os.name in ('nt','dos'):\r\n",
					"    os_name = 'windows'\r\n",
					"else:\r\n",
					"    os_name = os.name\r\n",
					"\r\n",
					"# Under Windows, 'sdist' has not been supported.  Now that the docs build with\r\n",
					"# Sphinx it might work, but let's not turn it on until someone confirms that it\r\n",
					"# actually works.\r\n",
					"if os_name == 'windows' and 'sdist' in sys.argv:\r\n",
					"    print('The sdist command is not available under Windows.  Exiting.')\r\n",
					"    sys.exit(1)\r\n",
					"\r\n",
					"\r\n",
					"#-------------------------------------------------------------------------------\r\n",
					"# Things related to the IPython documentation\r\n",
					"#-------------------------------------------------------------------------------\r\n",
					"\r\n",
					"# update the manuals when building a source dist\r\n",
					"if len(sys.argv) >= 2 and sys.argv[1] in ('sdist','bdist_rpm'):\r\n",
					"\r\n",
					"    # List of things to be updated. Each entry is a triplet of args for\r\n",
					"    # target_update()\r\n",
					"    to_update = [\r\n",
					"                 ('docs/man/ipython.1.gz',\r\n",
					"                  ['docs/man/ipython.1'],\r\n",
					"                  'cd docs/man && gzip -9c ipython.1 > ipython.1.gz'),\r\n",
					"                 ]\r\n",
					"\r\n",
					"\r\n",
					"    [ target_update(*t) for t in to_update ]\r\n",
					"\r\n",
					"#---------------------------------------------------------------------------\r\n",
					"# Find all the packages, package data, and data_files\r\n",
					"#---------------------------------------------------------------------------\r\n",
					"\r\n",
					"packages = find_packages()\r\n",
					"package_data = find_package_data()\r\n",
					"\r\n",
					"data_files = find_data_files()\r\n",
					"\r\n",
					"setup_args['packages'] = packages\r\n",
					"setup_args['package_data'] = package_data\r\n",
					"setup_args['data_files'] = data_files\r\n",
					"\r\n",
					"#---------------------------------------------------------------------------\r\n",
					"# custom distutils commands\r\n",
					"#---------------------------------------------------------------------------\r\n",
					"# imports here, so they are after setuptools import if there was one\r\n",
					"from distutils.command.sdist import sdist\r\n",
					"\r\n",
					"setup_args['cmdclass'] = {\r\n",
					"    'build_py': \\\r\n",
					"            check_package_data_first(git_prebuild('IPython')),\r\n",
					"    'sdist' : git_prebuild('IPython', sdist),\r\n",
					"    'symlink': install_symlinked,\r\n",
					"    'install_lib_symlink': install_lib_symlink,\r\n",
					"    'install_scripts_sym': install_scripts_for_symlink,\r\n",
					"    'unsymlink': unsymlink,\r\n",
					"}\r\n",
					"\r\n",
					"\r\n",
					"#---------------------------------------------------------------------------\r\n",
					"# Handle scripts, dependencies, and setuptools specific things\r\n",
					"#---------------------------------------------------------------------------\r\n",
					"\r\n",
					"# For some commands, use setuptools.  Note that we do NOT list install here!\r\n",
					"# If you want a setuptools-enhanced install, just run 'setupegg.py install'\r\n",
					"needs_setuptools = {'develop', 'release', 'bdist_egg', 'bdist_rpm',\r\n",
					"           'bdist', 'bdist_dumb', 'bdist_wininst', 'bdist_wheel',\r\n",
					"           'egg_info', 'easy_install', 'upload', 'install_egg_info',\r\n",
					"          }\r\n",
					"\r\n",
					"if len(needs_setuptools.intersection(sys.argv)) > 0:\r\n",
					"    import setuptools\r\n",
					"\r\n",
					"# This dict is used for passing extra arguments that are setuptools\r\n",
					"# specific to setup\r\n",
					"setuptools_extra_args = {}\r\n",
					"\r\n",
					"# setuptools requirements\r\n",
					"\r\n",
					"extras_require = dict(\r\n",
					"    parallel=[\"ipyparallel\"],\r\n",
					"    qtconsole=[\"qtconsole\"],\r\n",
					"    doc=[\"Sphinx>=1.3\"],\r\n",
					"    test=[\r\n",
					"        \"nose>=0.10.1\",\r\n",
					"        \"requests\",\r\n",
					"        \"testpath\",\r\n",
					"        \"pygments\",\r\n",
					"        \"nbformat\",\r\n",
					"        \"ipykernel\",\r\n",
					"        \"numpy>=1.16\",\r\n",
					"    ],\r\n",
					"    terminal=[],\r\n",
					"    kernel=[\"ipykernel\"],\r\n",
					"    nbformat=[\"nbformat\"],\r\n",
					"    notebook=[\"notebook\", \"ipywidgets\"],\r\n",
					"    nbconvert=[\"nbconvert\"],\r\n",
					")\r\n",
					"\r\n",
					"install_requires = [\r\n",
					"    'setuptools>=18.5',\r\n",
					"    'jedi>=0.16',\r\n",
					"    'decorator',\r\n",
					"    'pickleshare',\r\n",
					"    'traitlets>=4.2',\r\n",
					"    'prompt_toolkit>=2.0.0,<3.1.0,!=3.0.0,!=3.0.1',\r\n",
					"    'pygments',\r\n",
					"    'backcall',\r\n",
					"    'stack_data',\r\n",
					"]\r\n",
					"\r\n",
					"# Platform-specific dependencies:\r\n",
					"# This is the correct way to specify these,\r\n",
					"# but requires pip >= 6. pip < 6 ignores these.\r\n",
					"\r\n",
					"extras_require.update(\r\n",
					"    {\r\n",
					"        ':sys_platform != \"win32\"': [\"pexpect>4.3\"],\r\n",
					"        ':sys_platform == \"darwin\"': [\"appnope\"],\r\n",
					"        ':sys_platform == \"win32\"': [\"colorama\"],\r\n",
					"    }\r\n",
					")\r\n",
					"# FIXME: re-specify above platform dependencies for pip < 6\r\n",
					"# These would result in non-portable bdists.\r\n",
					"if not any(arg.startswith('bdist') for arg in sys.argv):\r\n",
					"    if sys.platform == 'darwin':\r\n",
					"        install_requires.extend(['appnope'])\r\n",
					"\r\n",
					"    if not sys.platform.startswith(\"win\"):\r\n",
					"        install_requires.append(\"pexpect>4.3\")\r\n",
					"\r\n",
					"    # workaround pypa/setuptools#147, where setuptools misspells\r\n",
					"    # platform_python_implementation as python_implementation\r\n",
					"    if 'setuptools' in sys.modules:\r\n",
					"        for key in list(extras_require):\r\n",
					"            if 'platform_python_implementation' in key:\r\n",
					"                new_key = key.replace('platform_python_implementation', 'python_implementation')\r\n",
					"                extras_require[new_key] = extras_require.pop(key)\r\n",
					"\r\n",
					"everything = set()\r\n",
					"for key, deps in extras_require.items():\r\n",
					"    if ':' not in key:\r\n",
					"        everything.update(deps)\r\n",
					"extras_require['all'] = list(sorted(everything))\r\n",
					"\r\n",
					"if 'setuptools' in sys.modules:\r\n",
					"    setuptools_extra_args['python_requires'] = '>=3.7'\r\n",
					"    setuptools_extra_args['zip_safe'] = False\r\n",
					"    setuptools_extra_args['entry_points'] = {\r\n",
					"        'console_scripts': find_entry_points(),\r\n",
					"        'pygments.lexers': [\r\n",
					"            'ipythonconsole = IPython.lib.lexers:IPythonConsoleLexer',\r\n",
					"            'ipython = IPython.lib.lexers:IPythonLexer',\r\n",
					"            'ipython3 = IPython.lib.lexers:IPython3Lexer',\r\n",
					"        ],\r\n",
					"    }\r\n",
					"    setup_args['extras_require'] = extras_require\r\n",
					"    setup_args['install_requires'] = install_requires\r\n",
					"\r\n",
					"else:\r\n",
					"    # scripts has to be a non-empty list, or install_scripts isn't called\r\n",
					"    setup_args['scripts'] = [e.split('=')[0].strip() for e in find_entry_points()]\r\n",
					"\r\n",
					"    setup_args['cmdclass']['build_scripts'] = build_scripts_entrypt\r\n",
					"\r\n",
					"#---------------------------------------------------------------------------\r\n",
					"# Do the actual setup now\r\n",
					"#---------------------------------------------------------------------------\r\n",
					"\r\n",
					"setup_args.update(setuptools_extra_args)\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"def main():\r\n",
					"    setup(**setup_args)\r\n",
					"\r\n",
					"if __name__ == '__main__':\r\n",
					"    main()\r\n",
					"\r\n",
					"main"
				],
				"attachments": null,
				"execution_count": null
			}
		]
	}
}