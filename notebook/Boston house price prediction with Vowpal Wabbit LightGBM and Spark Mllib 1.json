{
	"name": "Boston house price prediction with Vowpal Wabbit LightGBM and Spark Mllib 1",
	"properties": {
		"folder": {
			"name": "New folder 1"
		},
		"nbformat": 0,
		"nbformat_minor": 0,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1",
				"state": {
					"82c3f9db-24c4-43f1-90d1-19374a4a1cd3": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"f7": 4.09,
										"f6": 65.2,
										"f1": 18,
										"f8": 1,
										"f10": 15.3,
										"f0": 0.00632,
										"f5": 6.575,
										"f3": 0,
										"f9": 296,
										"f4": 0.538,
										"f11": 396.9,
										"target": 24,
										"f2": 2.31,
										"f12": 4.98
									},
									{
										"f7": 4.9671,
										"f6": 78.9,
										"f1": 0,
										"f8": 2,
										"f10": 17.8,
										"f0": 0.02731,
										"f5": 6.421,
										"f3": 0,
										"f9": 242,
										"f4": 0.469,
										"f11": 396.9,
										"target": 21.6,
										"f2": 7.07,
										"f12": 9.14
									},
									{
										"f7": 4.9671,
										"f6": 61.1,
										"f1": 0,
										"f8": 2,
										"f10": 17.8,
										"f0": 0.02729,
										"f5": 7.185,
										"f3": 0,
										"f9": 242,
										"f4": 0.469,
										"f11": 392.83,
										"target": 34.7,
										"f2": 7.07,
										"f12": 4.03
									},
									{
										"f7": 6.0622,
										"f6": 45.8,
										"f1": 0,
										"f8": 3,
										"f10": 18.7,
										"f0": 0.03237,
										"f5": 6.998,
										"f3": 0,
										"f9": 222,
										"f4": 0.458,
										"f11": 394.63,
										"target": 33.4,
										"f2": 2.18,
										"f12": 2.94
									},
									{
										"f7": 6.0622,
										"f6": 54.2,
										"f1": 0,
										"f8": 3,
										"f10": 18.7,
										"f0": 0.06905,
										"f5": 7.147,
										"f3": 0,
										"f9": 222,
										"f4": 0.458,
										"f11": 396.9,
										"target": 36.2,
										"f2": 2.18,
										"f12": 5.33
									},
									{
										"f7": 6.0622,
										"f6": 58.7,
										"f1": 0,
										"f8": 3,
										"f10": 18.7,
										"f0": 0.02985,
										"f5": 6.43,
										"f3": 0,
										"f9": 222,
										"f4": 0.458,
										"f11": 394.12,
										"target": 28.7,
										"f2": 2.18,
										"f12": 5.21
									},
									{
										"f7": 5.5605,
										"f6": 66.6,
										"f1": 12.5,
										"f8": 5,
										"f10": 15.2,
										"f0": 0.08829,
										"f5": 6.012,
										"f3": 0,
										"f9": 311,
										"f4": 0.524,
										"f11": 395.6,
										"target": 22.9,
										"f2": 7.87,
										"f12": 12.43
									},
									{
										"f7": 5.9505,
										"f6": 96.1,
										"f1": 12.5,
										"f8": 5,
										"f10": 15.2,
										"f0": 0.14455,
										"f5": 6.172,
										"f3": 0,
										"f9": 311,
										"f4": 0.524,
										"f11": 396.9,
										"target": 27.1,
										"f2": 7.87,
										"f12": 19.15
									},
									{
										"f7": 6.0821,
										"f6": 100,
										"f1": 12.5,
										"f8": 5,
										"f10": 15.2,
										"f0": 0.21124,
										"f5": 5.631,
										"f3": 0,
										"f9": 311,
										"f4": 0.524,
										"f11": 386.63,
										"target": 16.5,
										"f2": 7.87,
										"f12": 29.93
									},
									{
										"f7": 6.5921,
										"f6": 85.9,
										"f1": 12.5,
										"f8": 5,
										"f10": 15.2,
										"f0": 0.17004,
										"f5": 6.004,
										"f3": 0,
										"f9": 311,
										"f4": 0.524,
										"f11": 386.71,
										"target": 18.9,
										"f2": 7.87,
										"f12": 17.1
									}
								],
								"schema": {
									"target": "double",
									"f0": "double",
									"f1": "double",
									"f2": "double",
									"f3": "double",
									"f4": "double",
									"f5": "double",
									"f6": "double",
									"f7": "double",
									"f8": "double",
									"f9": "double",
									"f10": "double",
									"f11": "double",
									"f12": "double"
								}
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"f0"
									],
									"seriesFieldKeys": [
										"target"
									],
									"isStacked": false
								}
							}
						}
					},
					"a74a7036-febe-40b2-a595-9a785694bef1": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"f7": "377",
										"f6": "377",
										"f1": "377",
										"f8": "377",
										"f10": "377",
										"f0": "377",
										"f5": "377",
										"f3": "377",
										"f9": "377",
										"f4": "377",
										"f11": "377",
										"target": "377",
										"summary": "count",
										"f2": "377",
										"f12": "377"
									},
									{
										"f7": "3.7060336870026527",
										"f6": "70.09734748010614",
										"f1": "10.809018567639257",
										"f8": "9.782493368700266",
										"f10": "18.52015915119362",
										"f0": "3.713706445623341",
										"f5": "6.236015915119363",
										"f3": "0.07427055702917772",
										"f9": "414.40318302387266",
										"f4": "0.5621320954907156",
										"f11": "350.23286472148504",
										"target": "21.973740053050395",
										"summary": "mean",
										"f2": "11.50358090185676",
										"f12": "13.184270557029182"
									},
									{
										"f7": "2.0910161916976997",
										"f6": "28.107981250290862",
										"f1": "23.063986464629473",
										"f8": "8.78226035585757",
										"f10": "2.140967413102137",
										"f0": "7.864063086907033",
										"f5": "0.710894626480467",
										"f3": "0.2625591341862547",
										"f9": "170.03684453811675",
										"f4": "0.11925569148339353",
										"f11": "99.13944837560052",
										"target": "8.895643511000259",
										"summary": "stddev",
										"f2": "6.898021082586262",
										"f12": "7.313211453734242"
									},
									{
										"f7": "1.1296",
										"f6": "2.9",
										"f1": "0.0",
										"f8": "1.0",
										"f10": "12.6",
										"f0": "0.00632",
										"f5": "3.561",
										"f3": "0.0",
										"f9": "188.0",
										"f4": "0.385",
										"f11": "0.32",
										"target": "5.0",
										"summary": "min",
										"f2": "0.46",
										"f12": "1.98"
									},
									{
										"f7": "2.0651",
										"f6": "47.2",
										"f1": "0.0",
										"f8": "4.0",
										"f10": "17.4",
										"f0": "0.09164",
										"f5": "5.875",
										"f3": "0.0",
										"f9": "284.0",
										"f4": "0.453",
										"f11": "371.58",
										"target": "16.3",
										"summary": "25%",
										"f2": "5.64",
										"f12": "7.39"
									},
									{
										"f7": "2.9634",
										"f6": "80.8",
										"f1": "0.0",
										"f8": "5.0",
										"f10": "19.1",
										"f0": "0.29916",
										"f5": "6.167",
										"f3": "0.0",
										"f9": "334.0",
										"f4": "0.538",
										"f11": "390.95",
										"target": "20.7",
										"summary": "50%",
										"f2": "9.9",
										"f12": "12.26"
									},
									{
										"f7": "5.1004",
										"f6": "94.6",
										"f1": "12.5",
										"f8": "24.0",
										"f10": "20.2",
										"f0": "3.83684",
										"f5": "6.567",
										"f3": "0.0",
										"f9": "666.0",
										"f4": "0.647",
										"f11": "396.23",
										"target": "24.7",
										"summary": "75%",
										"f2": "18.1",
										"f12": "17.27"
									},
									{
										"f7": "10.7103",
										"f6": "100.0",
										"f1": "95.0",
										"f8": "24.0",
										"f10": "22.0",
										"f0": "73.5341",
										"f5": "8.78",
										"f3": "1.0",
										"f9": "711.0",
										"f4": "0.871",
										"f11": "396.9",
										"target": "50.0",
										"summary": "max",
										"f2": "27.74",
										"f12": "37.97"
									}
								],
								"schema": {
									"summary": "string",
									"target": "string",
									"f0": "string",
									"f1": "string",
									"f2": "string",
									"f3": "string",
									"f4": "string",
									"f5": "string",
									"f6": "string",
									"f7": "string",
									"f8": "string",
									"f9": "string",
									"f10": "string",
									"f11": "string",
									"f12": "string"
								}
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "count",
									"categoryFieldKeys": [
										"summary"
									],
									"seriesFieldKeys": [
										"summary"
									],
									"isStacked": false
								}
							}
						}
					},
					"600096d1-9aa7-4ad6-9232-ec62959e81bb": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"target": 5,
										"features": {
											"type": 1,
											"values": [
												38.3518,
												0,
												18.1,
												0,
												0.693,
												5.453,
												100,
												1.4896,
												24,
												666,
												20.2,
												396.9,
												30.59
											]
										}
									},
									{
										"target": 7,
										"features": {
											"type": 1,
											"values": [
												0.18337,
												0,
												27.74,
												0,
												0.609,
												5.414,
												98.3,
												1.7554,
												4,
												711,
												20.1,
												344.05,
												23.97
											]
										}
									},
									{
										"target": 7,
										"features": {
											"type": 1,
											"values": [
												45.7461,
												0,
												18.1,
												0,
												0.693,
												4.519,
												100,
												1.6582,
												24,
												666,
												20.2,
												88.27,
												36.98
											]
										}
									},
									{
										"target": 7.2,
										"features": {
											"type": 1,
											"values": [
												14.2362,
												0,
												18.1,
												0,
												0.693,
												6.343,
												100,
												1.5741,
												24,
												666,
												20.2,
												396.9,
												20.32
											]
										}
									},
									{
										"target": 7.2,
										"features": {
											"type": 1,
											"values": [
												16.8118,
												0,
												18.1,
												0,
												0.7,
												5.277,
												98.1,
												1.4261,
												24,
												666,
												20.2,
												396.9,
												30.81
											]
										}
									},
									{
										"target": 7.2,
										"features": {
											"type": 1,
											"values": [
												18.0846,
												0,
												18.1,
												0,
												0.679,
												6.434,
												100,
												1.8347,
												24,
												666,
												20.2,
												27.25,
												29.05
											]
										}
									},
									{
										"target": 7.4,
										"features": {
											"type": 1,
											"values": [
												22.5971,
												0,
												18.1,
												0,
												0.7,
												5,
												89.5,
												1.5184,
												24,
												666,
												20.2,
												396.9,
												31.99
											]
										}
									},
									{
										"target": 7.5,
										"features": {
											"type": 1,
											"values": [
												10.8342,
												0,
												18.1,
												0,
												0.679,
												6.782,
												90.8,
												1.8195,
												24,
												666,
												20.2,
												21.57,
												25.79
											]
										}
									},
									{
										"target": 8.1,
										"features": {
											"type": 1,
											"values": [
												0.20746,
												0,
												27.74,
												0,
												0.609,
												5.093,
												98,
												1.8226,
												4,
												711,
												20.1,
												318.43,
												29.68
											]
										}
									},
									{
										"target": 8.3,
										"features": {
											"type": 1,
											"values": [
												15.8603,
												0,
												18.1,
												0,
												0.679,
												5.896,
												95.4,
												1.9096,
												24,
												666,
												20.2,
												7.68,
												24.39
											]
										}
									}
								],
								"schema": {
									"target": "double",
									"features": "org.apache.spark.ml.linalg.VectorUDT@3bfc3ba7"
								}
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [],
									"seriesFieldKeys": [
										"target"
									],
									"isStacked": false
								}
							}
						}
					},
					"2f89eb4c-27c9-4eaa-9a88-31332f805c21": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"target": 5,
										"features": {
											"type": 1,
											"values": [
												67.9208,
												0,
												18.1,
												0,
												0.693,
												5.683,
												100,
												1.4254,
												24,
												666,
												20.2,
												384.97,
												22.98
											]
										},
										"prediction": 10.840796919767257
									},
									{
										"target": 5.6,
										"features": {
											"type": 1,
											"values": [
												25.0461,
												0,
												18.1,
												0,
												0.693,
												5.987,
												100,
												1.5888,
												24,
												666,
												20.2,
												396.9,
												26.77
											]
										},
										"prediction": 13.243210244993282
									},
									{
										"target": 6.3,
										"features": {
											"type": 1,
											"values": [
												9.91655,
												0,
												18.1,
												0,
												0.693,
												5.852,
												77.8,
												1.5004,
												24,
												666,
												20.2,
												338.16,
												29.97
											]
										},
										"prediction": 12.14686562729382
									},
									{
										"target": 8.3,
										"features": {
											"type": 1,
											"values": [
												24.8017,
												0,
												18.1,
												0,
												0.693,
												5.349,
												96,
												1.7028,
												24,
												666,
												20.2,
												396.9,
												19.77
											]
										},
										"prediction": 14.471714057928402
									},
									{
										"target": 8.5,
										"features": {
											"type": 1,
											"values": [
												7.67202,
												0,
												18.1,
												0,
												0.693,
												5.747,
												98.9,
												1.6334,
												24,
												666,
												20.2,
												393.1,
												19.92
											]
										},
										"prediction": 17.08265883101909
									},
									{
										"target": 10.2,
										"features": {
											"type": 1,
											"values": [
												17.8667,
												0,
												18.1,
												0,
												0.671,
												6.223,
												100,
												1.3861,
												24,
												666,
												20.2,
												393.74,
												21.78
											]
										},
										"prediction": 17.72097721514993
									},
									{
										"target": 10.4,
										"features": {
											"type": 1,
											"values": [
												88.9762,
												0,
												18.1,
												0,
												0.671,
												6.968,
												91.9,
												1.4165,
												24,
												666,
												20.2,
												396.9,
												17.21
											]
										},
										"prediction": 16.741030711114753
									},
									{
										"target": 11,
										"features": {
											"type": 1,
											"values": [
												7.36711,
												0,
												18.1,
												0,
												0.679,
												6.193,
												78.1,
												1.9356,
												24,
												666,
												20.2,
												96.73,
												21.52
											]
										},
										"prediction": 14.431770346035968
									},
									{
										"target": 11.3,
										"features": {
											"type": 1,
											"values": [
												9.18702,
												0,
												18.1,
												0,
												0.7,
												5.536,
												100,
												1.5804,
												24,
												666,
												20.2,
												396.9,
												23.6
											]
										},
										"prediction": 14.478643032934919
									},
									{
										"target": 12.7,
										"features": {
											"type": 1,
											"values": [
												13.3598,
												0,
												18.1,
												0,
												0.693,
												5.887,
												94.7,
												1.7821,
												24,
												666,
												20.2,
												396.9,
												16.35
											]
										},
										"prediction": 18.65300921286679
									}
								],
								"schema": {
									"target": "double",
									"features": "org.apache.spark.ml.linalg.VectorUDT@3bfc3ba7",
									"prediction": "double"
								}
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"prediction"
									],
									"seriesFieldKeys": [
										"target"
									],
									"isStacked": false
								}
							}
						}
					},
					"795426d8-a364-4c03-b5e3-886d06d9bcae": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"model": "Spark MLlib - Linear Regression",
										"root_mean_squared_error": 5.289264571158696,
										"mean_absolute_error": 3.7154226196060236,
										"mean_squared_error": 27.976319703714584,
										"R^2": 0.7112910017173594
									}
								],
								"schema": {
									"model": "string",
									"mean_squared_error": "double",
									"root_mean_squared_error": "double",
									"R^2": "double",
									"mean_absolute_error": "double"
								}
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"model"
									],
									"seriesFieldKeys": [
										"mean_squared_error"
									],
									"isStacked": false
								}
							}
						}
					},
					"70da46b4-6839-445f-82b0-4fbb7b3ca4b7": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"target": 5,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												100,
												18.1,
												1.4896,
												666,
												24,
												30.59,
												5.453,
												396.9,
												38.3518,
												0.693
											]
										}
									},
									{
										"target": 7,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.1,
												98.3,
												27.74,
												1.7554,
												711,
												4,
												23.97,
												5.414,
												344.05,
												0.18337,
												0.609
											]
										}
									},
									{
										"target": 7,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												100,
												18.1,
												1.6582,
												666,
												24,
												36.98,
												4.519,
												88.27,
												45.7461,
												0.693
											]
										}
									},
									{
										"target": 7.2,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												100,
												18.1,
												1.5741,
												666,
												24,
												20.32,
												6.343,
												396.9,
												14.2362,
												0.693
											]
										}
									},
									{
										"target": 7.2,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												98.1,
												18.1,
												1.4261,
												666,
												24,
												30.81,
												5.277,
												396.9,
												16.8118,
												0.7
											]
										}
									},
									{
										"target": 7.2,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												100,
												18.1,
												1.8347,
												666,
												24,
												29.05,
												6.434,
												27.25,
												18.0846,
												0.679
											]
										}
									},
									{
										"target": 7.4,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												89.5,
												18.1,
												1.5184,
												666,
												24,
												31.99,
												5,
												396.9,
												22.5971,
												0.7
											]
										}
									},
									{
										"target": 7.5,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												90.8,
												18.1,
												1.8195,
												666,
												24,
												25.79,
												6.782,
												21.57,
												10.8342,
												0.679
											]
										}
									},
									{
										"target": 8.1,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.1,
												98,
												27.74,
												1.8226,
												711,
												4,
												29.68,
												5.093,
												318.43,
												0.20746,
												0.609
											]
										}
									},
									{
										"target": 8.3,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												95.4,
												18.1,
												1.9096,
												666,
												24,
												24.39,
												5.896,
												7.68,
												15.8603,
												0.679
											]
										}
									}
								],
								"schema": {
									"target": "double",
									"features": "org.apache.spark.ml.linalg.VectorUDT@3bfc3ba7"
								}
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [],
									"seriesFieldKeys": [
										"target"
									],
									"isStacked": false
								}
							}
						}
					},
					"eed8eb90-268c-4803-ad6c-b173411a6203": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"target": 5,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												100,
												18.1,
												1.4254,
												666,
												24,
												22.98,
												5.683,
												384.97,
												67.9208,
												0.693
											]
										},
										"rawPrediction": 20.90886688232422,
										"prediction": 20.90886688232422
									},
									{
										"target": 5.6,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												100,
												18.1,
												1.5888,
												666,
												24,
												26.77,
												5.987,
												396.9,
												25.0461,
												0.693
											]
										},
										"rawPrediction": 32.110198974609375,
										"prediction": 32.110198974609375
									},
									{
										"target": 6.3,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												77.8,
												18.1,
												1.5004,
												666,
												24,
												29.97,
												5.852,
												338.16,
												9.91655,
												0.693
											]
										},
										"rawPrediction": 34.4964599609375,
										"prediction": 34.4964599609375
									},
									{
										"target": 8.3,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												96,
												18.1,
												1.7028,
												666,
												24,
												19.77,
												5.349,
												396.9,
												24.8017,
												0.693
											]
										},
										"rawPrediction": 33.560638427734375,
										"prediction": 33.560638427734375
									},
									{
										"target": 8.5,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												98.9,
												18.1,
												1.6334,
												666,
												24,
												19.92,
												5.747,
												393.1,
												7.67202,
												0.693
											]
										},
										"rawPrediction": 40.183040618896484,
										"prediction": 40.183040618896484
									},
									{
										"target": 10.2,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												100,
												18.1,
												1.3861,
												666,
												24,
												21.78,
												6.223,
												393.74,
												17.8667,
												0.671
											]
										},
										"rawPrediction": 37.640419006347656,
										"prediction": 37.640419006347656
									},
									{
										"target": 10.4,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												91.9,
												18.1,
												1.4165,
												666,
												24,
												17.21,
												6.968,
												396.9,
												88.9762,
												0.671
											]
										},
										"rawPrediction": 23.387290954589844,
										"prediction": 23.387290954589844
									},
									{
										"target": 11,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												78.1,
												18.1,
												1.9356,
												666,
												24,
												21.52,
												6.193,
												96.73,
												7.36711,
												0.679
											]
										},
										"rawPrediction": 33.56855010986328,
										"prediction": 33.56855010986328
									},
									{
										"target": 11.3,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												100,
												18.1,
												1.5804,
												666,
												24,
												23.6,
												5.536,
												396.9,
												9.18702,
												0.7
											]
										},
										"rawPrediction": 37.96609115600586,
										"prediction": 37.96609115600586
									},
									{
										"target": 12.7,
										"features": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												94.7,
												18.1,
												1.7821,
												666,
												24,
												16.35,
												5.887,
												396.9,
												13.3598,
												0.693
											]
										},
										"rawPrediction": 39.88002014160156,
										"prediction": 39.88002014160156
									}
								],
								"schema": {
									"target": "double",
									"features": "org.apache.spark.ml.linalg.VectorUDT@3bfc3ba7",
									"rawPrediction": "double",
									"prediction": "double"
								}
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"rawPrediction"
									],
									"seriesFieldKeys": [
										"target"
									],
									"isStacked": false
								}
							}
						}
					},
					"9c80f938-a9c2-447f-896e-a3b5447ed2f9": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"model": "Spark MLlib - Linear Regression",
										"root_mean_squared_error": 5.289264571158696,
										"mean_absolute_error": 3.7154226196060236,
										"mean_squared_error": 27.976319703714584,
										"R^2": 0.7112910017173594
									},
									{
										"model": "Vowpal Wabbit",
										"root_mean_squared_error": 16.174328983110463,
										"mean_absolute_error": 14.759180039398432,
										"mean_squared_error": 261.6089180538872,
										"R^2": -1.6997421202301588
									}
								],
								"schema": {
									"model": "string",
									"mean_squared_error": "double",
									"root_mean_squared_error": "double",
									"R^2": "double",
									"mean_absolute_error": "double"
								}
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"model"
									],
									"seriesFieldKeys": [
										"mean_squared_error"
									],
									"isStacked": false
								}
							}
						}
					},
					"66ca8e41-a8e6-4f96-8859-301c2c46b3ff": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"target": 5,
										"features": {
											"type": 1,
											"values": [
												67.9208,
												0,
												18.1,
												0,
												0.693,
												5.683,
												100,
												1.4254,
												24,
												666,
												20.2,
												384.97,
												22.98
											]
										},
										"prediction": 10.125545304878454
									},
									{
										"target": 5.6,
										"features": {
											"type": 1,
											"values": [
												25.0461,
												0,
												18.1,
												0,
												0.693,
												5.987,
												100,
												1.5888,
												24,
												666,
												20.2,
												396.9,
												26.77
											]
										},
										"prediction": 7.8555181506504566
									},
									{
										"target": 6.3,
										"features": {
											"type": 1,
											"values": [
												9.91655,
												0,
												18.1,
												0,
												0.693,
												5.852,
												77.8,
												1.5004,
												24,
												666,
												20.2,
												338.16,
												29.97
											]
										},
										"prediction": 12.350327830954347
									},
									{
										"target": 8.3,
										"features": {
											"type": 1,
											"values": [
												24.8017,
												0,
												18.1,
												0,
												0.693,
												5.349,
												96,
												1.7028,
												24,
												666,
												20.2,
												396.9,
												19.77
											]
										},
										"prediction": 9.408284298711045
									},
									{
										"target": 8.5,
										"features": {
											"type": 1,
											"values": [
												7.67202,
												0,
												18.1,
												0,
												0.693,
												5.747,
												98.9,
												1.6334,
												24,
												666,
												20.2,
												393.1,
												19.92
											]
										},
										"prediction": 11.705711758454298
									},
									{
										"target": 10.2,
										"features": {
											"type": 1,
											"values": [
												17.8667,
												0,
												18.1,
												0,
												0.671,
												6.223,
												100,
												1.3861,
												24,
												666,
												20.2,
												393.74,
												21.78
											]
										},
										"prediction": 11.378612631892928
									},
									{
										"target": 10.4,
										"features": {
											"type": 1,
											"values": [
												88.9762,
												0,
												18.1,
												0,
												0.671,
												6.968,
												91.9,
												1.4165,
												24,
												666,
												20.2,
												396.9,
												17.21
											]
										},
										"prediction": 12.758518021271096
									},
									{
										"target": 11,
										"features": {
											"type": 1,
											"values": [
												7.36711,
												0,
												18.1,
												0,
												0.679,
												6.193,
												78.1,
												1.9356,
												24,
												666,
												20.2,
												96.73,
												21.52
											]
										},
										"prediction": 11.009850748168407
									},
									{
										"target": 11.3,
										"features": {
											"type": 1,
											"values": [
												9.18702,
												0,
												18.1,
												0,
												0.7,
												5.536,
												100,
												1.5804,
												24,
												666,
												20.2,
												396.9,
												23.6
											]
										},
										"prediction": 11.789698630551646
									},
									{
										"target": 12.7,
										"features": {
											"type": 1,
											"values": [
												13.3598,
												0,
												18.1,
												0,
												0.693,
												5.887,
												94.7,
												1.7821,
												24,
												666,
												20.2,
												396.9,
												16.35
											]
										},
										"prediction": 12.862038681023014
									}
								],
								"schema": {
									"target": "double",
									"features": "org.apache.spark.ml.linalg.VectorUDT@3bfc3ba7",
									"prediction": "double"
								}
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"prediction"
									],
									"seriesFieldKeys": [
										"target"
									],
									"isStacked": false
								}
							}
						}
					},
					"64d87527-ac0f-48e1-a7d2-8e897a0d942a": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"model": "Spark MLlib - Linear Regression",
										"root_mean_squared_error": 5.289264571158696,
										"mean_absolute_error": 3.7154226196060236,
										"mean_squared_error": 27.976319703714584,
										"R^2": 0.7112910017173594
									},
									{
										"model": "Vowpal Wabbit",
										"root_mean_squared_error": 16.174328983110463,
										"mean_absolute_error": 14.759180039398432,
										"mean_squared_error": 261.6089180538872,
										"R^2": -1.6997421202301588
									},
									{
										"model": "LightGBM",
										"root_mean_squared_error": 4.137126234991358,
										"mean_absolute_error": 2.671315643076597,
										"mean_squared_error": 17.11581348425377,
										"R^2": 0.823368855583413
									}
								],
								"schema": {
									"model": "string",
									"mean_squared_error": "double",
									"root_mean_squared_error": "double",
									"R^2": "double",
									"mean_absolute_error": "double"
								}
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"model"
									],
									"seriesFieldKeys": [
										"mean_squared_error"
									],
									"isStacked": false
								}
							}
						}
					}
				}
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			}
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"# Boston house price prediction with Vowpal Wabbit, LightGBM and Spark MLlib\n",
					"\n",
					"This notebook shows how to build simple regression models by using \n",
					"[Vowpal Wabbit (VW)](https://github.com/VowpalWabbit/vowpal_wabbit) and \n",
					"[LightGBM](https://github.com/microsoft/LightGBM) with MMLSpark.\n",
					" We also compare the results with \n",
					" [Spark MLlib Linear Regression](https://spark.apache.org/docs/latest/ml-classification-regression.html#linear-regression)."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"import math\n",
					"from matplotlib.colors import ListedColormap, Normalize\n",
					"from matplotlib.cm import get_cmap\n",
					"import matplotlib.pyplot as plt\n",
					"from mmlspark.train import ComputeModelStatistics\n",
					"from mmlspark.vw import VowpalWabbitRegressor, VowpalWabbitFeaturizer\n",
					"from mmlspark.lightgbm import LightGBMRegressor\n",
					"import numpy as np\n",
					"import pandas as pd\n",
					"from pyspark.ml.feature import VectorAssembler\n",
					"from pyspark.ml.regression import LinearRegression\n",
					"from sklearn.datasets import load_boston"
				],
				"attachments": null,
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Prepare Dataset\n",
					"We use [*Boston house price* dataset](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_boston.html) \n",
					". \n",
					"The data was collected in 1978 from Boston area and consists of 506 entries with 14 features including the value of homes. \n",
					"We use `sklearn.datasets` module to download it easily, then split the set into training and testing by 75/25."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"boston = load_boston()\n",
					"\n",
					"feature_cols = ['f' + str(i) for i in range(boston.data.shape[1])]\n",
					"header = ['target'] + feature_cols\n",
					"df = spark.createDataFrame(\n",
					"    pd.DataFrame(data=np.column_stack((boston.target, boston.data)), columns=header)\n",
					").repartition(1)\n",
					"print(\"Dataframe has {} rows\".format(df.count()))\n",
					"display(df.limit(10).toPandas())"
				],
				"attachments": null,
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"train_data, test_data = df.randomSplit([0.75, 0.25], seed=42)\n",
					"train_data.cache()\n",
					"test_data.cache()"
				],
				"attachments": null,
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"source": [
					"Following is the summary of the training set."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"display(train_data.summary().toPandas())"
				],
				"attachments": null,
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"source": [
					"Plot feature distributions over different target values (house prices in our case)."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"features = train_data.columns[1:]\n",
					"values = train_data.drop('target').toPandas()\n",
					"ncols = 5\n",
					"nrows = math.ceil(len(features) / ncols)\n",
					"\n",
					"yy = [r['target'] for r in train_data.select('target').collect()]\n",
					"\n",
					"f, axes = plt.subplots(nrows, ncols, sharey=True, figsize=(30,10))\n",
					"f.tight_layout()\n",
					"\n",
					"for irow in range(nrows):\n",
					"    axes[irow][0].set_ylabel('target')\n",
					"    for icol in range(ncols):\n",
					"        try:\n",
					"            feat = features[irow*ncols + icol]\n",
					"            xx = values[feat]\n",
					"\n",
					"            axes[irow][icol].scatter(xx, yy, s=10, alpha=0.25)\n",
					"            axes[irow][icol].set_xlabel(feat)\n",
					"            axes[irow][icol].get_yaxis().set_ticks([])\n",
					"        except IndexError:\n",
					"            f.delaxes(axes[irow][icol])"
				],
				"attachments": null,
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Baseline - Spark MLlib Linear Regressor\n",
					"\n",
					"First, we set a baseline performance by using Linear Regressor in Spark MLlib."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"featurizer = VectorAssembler(\n",
					"    inputCols=feature_cols,\n",
					"    outputCol='features'\n",
					")\n",
					"lr_train_data = featurizer.transform(train_data)['target', 'features']\n",
					"lr_test_data = featurizer.transform(test_data)['target', 'features']\n",
					"display(lr_train_data.limit(10).toPandas())"
				],
				"attachments": null,
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"# By default, `maxIter` is 100. Other params you may want to change include: `regParam`, `elasticNetParam`, etc.\n",
					"lr = LinearRegression(\n",
					"    labelCol='target',\n",
					")\n",
					"\n",
					"lr_model = lr.fit(lr_train_data)\n",
					"lr_predictions = lr_model.transform(lr_test_data)\n",
					"\n",
					"display(lr_predictions.limit(10).toPandas())"
				],
				"attachments": null,
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"source": [
					"We evaluate the prediction result by using `mmlspark.train.ComputeModelStatistics` which returns four metrics:\n",
					"* [MSE (Mean Squared Error)](https://en.wikipedia.org/wiki/Mean_squared_error)\n",
					"* [RMSE (Root Mean Squared Error)](https://en.wikipedia.org/wiki/Root-mean-square_deviation) = sqrt(MSE)\n",
					"* [R quared](https://en.wikipedia.org/wiki/Coefficient_of_determination)\n",
					"* [MAE (Mean Absolute Error)](https://en.wikipedia.org/wiki/Mean_absolute_error)"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"metrics = ComputeModelStatistics(\n",
					"    evaluationMetric='regression',\n",
					"    labelCol='target',\n",
					"    scoresCol='prediction'\n",
					").transform(lr_predictions)\n",
					"\n",
					"results = metrics.toPandas()\n",
					"results.insert(0, 'model', ['Spark MLlib - Linear Regression'])\n",
					"display(results)"
				],
				"attachments": null,
				"execution_count": 8
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Vowpal Wabbit"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"Perform VW-style feature hashing. Many types (numbers, string, bool, map of string to (number, string)) are supported."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"vw_featurizer = VowpalWabbitFeaturizer(\n",
					"    inputCols=feature_cols,\n",
					"    outputCol='features',\n",
					")\n",
					"vw_train_data = vw_featurizer.transform(train_data)['target', 'features']\n",
					"vw_test_data = vw_featurizer.transform(test_data)['target', 'features']\n",
					"display(vw_train_data.limit(10).toPandas())"
				],
				"attachments": null,
				"execution_count": 9
			},
			{
				"cell_type": "markdown",
				"source": [
					"See [VW wiki](https://github.com/vowpalWabbit/vowpal_wabbit/wiki/Command-Line-Arguments) for command line arguments."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"# Use the same number of iterations as Spark MLlib's Linear Regression (=100)\n",
					"args = \"--holdout_off --loss_function quantile -l 7 -q :: --power_t 0.3\"\n",
					"vwr = VowpalWabbitRegressor(\n",
					"    labelCol='target',\n",
					"    args=args,\n",
					"    numPasses=100,\n",
					")\n",
					"\n",
					"# To reduce number of partitions (which will effect performance), use `vw_train_data.repartition(1)`\n",
					"vw_train_data_2 = vw_train_data.repartition(1).cache()\n",
					"print(vw_train_data_2.count())\n",
					"vw_model = vwr.fit(vw_train_data_2.repartition(1))\n",
					"vw_predictions = vw_model.transform(vw_test_data)\n",
					"\n",
					"display(vw_predictions.limit(10).toPandas())"
				],
				"attachments": null,
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"metrics = ComputeModelStatistics(\n",
					"    evaluationMetric='regression',\n",
					"    labelCol='target',\n",
					"    scoresCol='prediction'\n",
					").transform(vw_predictions)\n",
					"\n",
					"vw_result = metrics.toPandas()\n",
					"vw_result.insert(0, 'model', ['Vowpal Wabbit'])\n",
					"results = results.append(\n",
					"    vw_result,\n",
					"    ignore_index=True\n",
					")\n",
					"display(results)"
				],
				"attachments": null,
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"source": [
					"## LightGBM"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"lgr = LightGBMRegressor(\n",
					"    objective='quantile',\n",
					"    alpha=0.2,\n",
					"    learningRate=0.3,\n",
					"    numLeaves=31,\n",
					"    labelCol='target',\n",
					"    numIterations=100,\n",
					")\n",
					"\n",
					"# Using one partition since the training dataset is very small\n",
					"repartitioned_data = lr_train_data.repartition(1).cache()\n",
					"print(repartitioned_data.count())\n",
					"lg_model = lgr.fit(repartitioned_data)\n",
					"lg_predictions = lg_model.transform(lr_test_data)\n",
					"\n",
					"display(lg_predictions.limit(10).toPandas())"
				],
				"attachments": null,
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"metrics = ComputeModelStatistics(\n",
					"    evaluationMetric='regression',\n",
					"    labelCol='target',\n",
					"    scoresCol='prediction'\n",
					").transform(lg_predictions)\n",
					"\n",
					"lg_result = metrics.toPandas()\n",
					"lg_result.insert(0, 'model', ['LightGBM'])\n",
					"results = results.append(\n",
					"    lg_result,\n",
					"    ignore_index=True\n",
					")\n",
					"display(results)"
				],
				"attachments": null,
				"execution_count": 13
			},
			{
				"cell_type": "markdown",
				"source": [
					"Following figure shows the actual-vs.-prediction graphs of the results:\n",
					"\n",
					"<img width=\"1102\" alt=\"lr-vw-lg\" src=\"https://user-images.githubusercontent.com/42475935/64071975-4c3e9600-cc54-11e9-8b1f-9a1ee300f445.png\">"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"cmap = get_cmap('YlOrRd')\n",
					"\n",
					"target = np.array(test_data.select('target').collect()).flatten()\n",
					"model_preds = [\n",
					"    (\"Spark MLlib Linear Regression\", lr_predictions),\n",
					"    (\"Vowpal Wabbit\", vw_predictions),\n",
					"    (\"LightGBM\", lg_predictions)\n",
					"]"
				],
				"attachments": null,
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"f, axes = plt.subplots(1, len(model_preds), sharey=True, figsize=(18, 6))\r\n",
					"f.tight_layout()\r\n",
					"\r\n",
					"for i, (model_name, preds) in enumerate(model_preds):\r\n",
					"    preds = np.array(preds.select('prediction').collect()).flatten()\r\n",
					"    err = np.absolute(preds - target)\r\n",
					"\r\n",
					"    norm = Normalize()\r\n",
					"    clrs = cmap(np.asarray(norm(err)))[:, :-1]\r\n",
					"    axes[i].scatter(preds, target, s=60, c=clrs, edgecolors='#888888', alpha=0.75)\r\n",
					"    axes[i].plot((0, 60), (0, 60), linestyle='--', color='#888888')\r\n",
					"    axes[i].set_xlabel('Predicted values')\r\n",
					"    if i ==0:\r\n",
					"        axes[i].set_ylabel('Actual values')\r\n",
					"    axes[i].set_title(model_name)\r\n",
					"plt.show()"
				],
				"attachments": null,
				"execution_count": 15
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Clean up resources\r\n",
					"To ensure the Spark instance is shut down, end any connected sessions(notebooks). The pool shuts down when the **idle time** specified in the Apache Spark pool is reached. You can also select **stop session** from the status bar at the upper right of the notebook.\r\n",
					"\r\n",
					"![stopsession](https://adsnotebookrelease.blob.core.windows.net/adsnotebookrelease/adsnotebook/image/stopsession.png)"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Next steps\r\n",
					"\r\n",
					"* [Check out Synapse sample notebooks](https://github.com/Azure-Samples/Synapse/tree/main/MachineLearning) \r\n",
					"* [MMLSpark GitHub Repo](https://github.com/Azure/mmlspark)"
				],
				"attachments": null
			}
		]
	}
}